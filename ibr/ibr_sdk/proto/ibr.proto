syntax = "proto3";

message ImageData {
  // The length of the image (in pixels).
  float length = 1;

  // The width of the image (in pixels).
  float width = 2;

  // base64 encoded png representing a layer.
  bytes image = 3;
}

message InternalBuildingRepresentation {
  enum StructuralType {
    UNKNOWN = 0;
    BUILDING = 1;
    FLOOR = 2;
    PARTIAL_FLOOR = 3;
    SPACE = 4;
  }

  message Metadata {
    message FieldValue {
      string key = 1;
      string value = 2;
    }

    repeated FieldValue field_values = 1;
  }

  message Connection {
    enum Type {
      UNKNOWN = 0;

      // Unrestricted bi-directional access between origin and destination.
      UNRESTRICTED = 1;

      // Restricted access to external structure, does not guarantee access from
      // destination back to origin.
      ONE_WAY = 2;

      // Restricted access to certain time periods.
      TIME_LIMITED = 3;

      // Emergency access only.
      EMERGENCY = 4;

      // Restricted access to privileged users only.
      PRIVILEGED = 5;
    }

    // The destination IBR SPACE structure.
    string external_structure_id = 1;

    // The connection type from origin to destination.
    Type type = 2;

    // https://tools.ietf.org/html/rfc5545
    // spaces only available at certain times, public/nonpublic
    string recurrence = 3;
  }

  // A combined dedicated visual layer per floor that represents the unreacahble
  // walking space.
  message BlockingGrid {
    string id = 1;

    Visualization visualization = 2;
  }

  message Visualization {
    enum EncodingType {
      UNKNOWN = 0;
      VECTOR_2D = 1;
      VECTOR_3D = 2;
      BITMAP_IMAGE = 3;
    }

    // A unique identifier
    string id = 1;

    // The encoding type of the data to distinguish 2D vs 3D coordinates vs raw
    // bitmap image.
    EncodingType encoding_type = 2;

    // The representation of the layer, either a VectorCoordinate map or raw
    // bitmap image.
    oneof data {
      ImageData image_data = 3;

      // A byte array of coordinate indices that references coordinates_lookup.
      // Should be interpreted in pairs as start and end indices of a continuous
      // coordinates list that represents a polyline.
      bytes coordinate_indices = 4;
    }
  }

  // A reference to an external structure to which this structure belongs.
  message StructureReference {
    string guid = 1;
    StructuralType type = 2;
    string name = 3;
  }

  // The global unique id for the structure.
  string guid = 1;

  // A human-readable string identifier for the structure.
  string name = 2;

  // The structural type represented in this message (e.g. building vs floor).
  StructuralType structural_type = 3;

  // The human readable metadata for the structure.
  Metadata metadata = 4;

  // The compressed coordinates that is referenced throughout the message.
  // A base64 encoded ordered list of coordinates.
  // The decoded string comes in the form of comma separated coordinates which
  // are space separated floats. e.g. "<x> <y> <z>,<x> <y> <z>,<x> <y> <z>".
  // Visualization and other layers index into coordinates_lookup to determine
  // coordinate segments.
  bytes coordinates_lookup = 5;

  // A contained layer/visualization data (e.g. tri gross area layer,
  // external/internal walls, blocking geometry etc.)
  repeated Visualization visualization = 6;

  // Boundary of the structure, coordinates stored in lookup.
  bytes boundary = 7;

  // Child structures
  repeated InternalBuildingRepresentation structures = 8;

  // External references
  repeated StructureReference external_reference = 9;

  BlockingGrid blocking_grid = 10;

  repeated Connection connections = 11;
}
